
package tr.com.seruvent.vulnerabilityscanner.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import tr.com.seruvent.vulnerabilityscanner.service.HttpRequestService;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.*;


/**
 * Bu controller web uygulamalarında güvenlik açığı olup olmadığını kontrol edecektir
 *
 * Aşağıdaki zafiyetler kontrol edilmektedir
 *  SQL Injection :: Entpoint verilerek zafiyet kontrol edilmektedir
 *  XSS :: Entpoint verilere
 */
@RestController
@RequestMapping("/api")
public class ScannerController{

    @Autowired
    private HttpRequestService httpRequestService;

    @GetMapping("/scan-xss")
    public Map<String, Map<String, String>> scanXss(@RequestParam String url){
        Map<String, String> xssResult = xssInjection(url);
        Map<String, Map<String, String>> injectionResult = new HashMap<>();
        injectionResult.put("xssInjection" , xssResult);
        return injectionResult;
    }

    @GetMapping("/scan-sql-injection")
    public Map<String, Map<String, String>> scanSQLInjection(@RequestParam String url){
        Map<String, String> sqlInjection = sqlInjection(url);

        Map<String, Map<String, String>> injectionResult = new HashMap<>();
        injectionResult.put("sqlInjection" , sqlInjection);
        return injectionResult;
    }

    @GetMapping("/scan-all-vulnerabilities")
    public Map<String, Map<String, String>> home(@RequestParam String url){

        Map<String, String> sqlInjection = sqlInjection(url);
        Map<String, String> xssResult = xssInjection(url);

        Map<String, Map<String, String>> injectionResult = new HashMap<>();
        injectionResult.put("sqlInjection" , sqlInjection);
        injectionResult.put("xssInjection" , xssResult);
        return injectionResult;
    }


    /**
     *
     * Hedef domain'in GET ya da POST parametrelerine 3 farklı payload göndererek response karşılaştırılarak SQL
     * Injection olmadığına karar verilir.
     *
     * True dönmesi beklenen payload (admin' OR '2'='2'; #) ile False dönen payload (admin' AND '1'='2'; #)
     * karşılaştırılır
     *
     * Dönen response değerleri karşılaştırılır.
     *  (a' OR '2'='2'; #) ile (b' OR '2'='2'; #) aynı olmalı
     *  (a' OR '2'='2'; #) ile (b' AND '1'='2'; #) farklı olmalı
     *
     *
     * @return
     */
    public Map<String,String> sqlInjection(String url){
        // Initialization
        Map<String, String> sqlInjectionResult = new HashMap<>();

        // -1- URL ve payload seçilir
        String requestParamKey = "username";
        String requestParamValue = "a' OR 2=2; -- ";

        // -2- Payload map olarak ayarlanır
        HashMap<String,String> requestBody = new HashMap<>();
        requestBody.put(requestParamKey,requestParamValue);

        // -3- Request yapılır
        ResponseEntity<String> response = httpRequestService.sendGetRequest(false, url, requestBody);

        // -4- Request yapılır
        String responseBody = response.getBody();
        HttpHeaders headers = response.getHeaders();
        List<String> cookieList = headers.get("Set-Cookie");
        sqlInjectionResult.put("cookie", headers.get("Set-Cookie").get(0));

        for(String cookie : cookieList)
            System.out.println(cookie);
        //System.out.println(responseBody);

        return sqlInjectionResult;
    }


    /**
     * Hedef domain'in GET ya da POST parametrelerine payload göndererek response içinde gönderilen payload olup
     * olmadığına bakılır.
     *
     * Response html dosyasında inject ettiğimiz eleman varsa xss zafiyeti vardır
     *
     * @return
     */
    public Map<String, String> xssInjection(String url){

        // Initialization
        Map<String, String> sqlInjectionResult = new HashMap<>();

        // -1- URL ve payload seçilir
        String requestParamKey = "xssParam";
        String requestParamValue = "<div>123123123</div>";
        //url = url+"?xssParam=<div>123123123</div>";

        // -2- Payload map olarak ayarlanır
        HashMap<String,String> requestBody = new HashMap<>();
        requestBody.put(requestParamKey,requestParamValue);

        // -3- Request yapılır
        ResponseEntity<String> response = httpRequestService.sendGetRequest(url, requestBody);

        // -4- Request yapılır
        String responseBody = response.getBody();
        if(responseBody.contains(requestParamValue))
            sqlInjectionResult.put("requestPayload" , requestParamValue);
            sqlInjectionResult.put("response" , responseBody);

        return sqlInjectionResult;
    }

}