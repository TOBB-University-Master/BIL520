/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.guppy.bil520.hw1;

import java.awt.event.ItemEvent;
import java.util.Random;

/**
 *
 * @author kemalsamikaraca
 */
public class MainFrame extends javax.swing.JFrame {

    //<editor-fold defaultstate="collapsed" desc="*** MAIN FRAME ***">
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        plainAlphabet.setText(characterSet);
        cipherAlphabet.setText(shuffleCharacterSet());
        encryptionKeyOne.setText("");
        encryptionKeyOne.setEditable(true);
        encryptionKeyTwo.setText("");
        encryptionKeyTwo.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jDialog1 = new javax.swing.JDialog();
        menuPanelX = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JButton encryptButton = new javax.swing.JButton();
        javax.swing.JButton decryptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        encryptionKeyOne = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        plainAlphabet = new javax.swing.JTextField();
        cipherAlphabet = new javax.swing.JTextField();
        generateRandomAlphabetButton = new javax.swing.JButton();
        encryptionType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        encryptionKeyTwo = new javax.swing.JTextField();
        javax.swing.JButton clearLogButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cipherTextArea = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mainLogTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        operationMenu = new javax.swing.JMenu();
        shiftMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuPanelX.setBorder(javax.swing.BorderFactory.createTitledBorder("Plain Text"));

        plainTextArea.setColumns(20);
        plainTextArea.setRows(5);
        plainTextArea.setToolTipText("Enter plain text");
        jScrollPane1.setViewportView(plainTextArea);

        javax.swing.GroupLayout menuPanelXLayout = new javax.swing.GroupLayout(menuPanelX);
        menuPanelX.setLayout(menuPanelXLayout);
        menuPanelXLayout.setHorizontalGroup(
            menuPanelXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelXLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        menuPanelXLayout.setVerticalGroup(
            menuPanelXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelXLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Encryption Properties"));

        encryptButton.setBackground(new java.awt.Color(255, 0, 0));
        encryptButton.setFont(new java.awt.Font("PingFang HK", 1, 16)); // NOI18N
        encryptButton.setForeground(new java.awt.Color(255, 255, 255));
        encryptButton.setText("Encrypt");
        encryptButton.setAutoscrolls(true);
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        decryptButton.setBackground(new java.awt.Color(255, 0, 0));
        decryptButton.setFont(new java.awt.Font("PingFang HK", 1, 16)); // NOI18N
        decryptButton.setForeground(new java.awt.Color(255, 255, 255));
        decryptButton.setText("Decrypt");
        decryptButton.setAutoscrolls(true);
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Key-1");

        encryptionKeyOne.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setText("Character Set");

        jLabel3.setText("Random Set");

        plainAlphabet.setEditable(false);
        plainAlphabet.setText("abcdefghijklmnopqrstuwxyz");

        cipherAlphabet.setEditable(false);
        cipherAlphabet.setText("qxboywzfvskmihgpneudltcraj");

        generateRandomAlphabetButton.setText("Generate Key");
        generateRandomAlphabetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRandomAlphabetButtonActionPerformed(evt);
            }
        });

        encryptionType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shift", "Substitution", "Affine", "Vigenere" }));
        encryptionType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                encryptionTypeItemStateChanged(evt);
            }
        });

        jLabel4.setText("Encryption");

        jLabel5.setText("Key-2");

        encryptionKeyTwo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        encryptionKeyTwo.setToolTipText("");

        clearLogButton.setBackground(new java.awt.Color(255, 0, 0));
        clearLogButton.setFont(new java.awt.Font("PingFang HK", 1, 16)); // NOI18N
        clearLogButton.setForeground(new java.awt.Color(255, 255, 255));
        clearLogButton.setText("Clear Log");
        clearLogButton.setAutoscrolls(true);
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encryptionKeyTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(encryptionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptionKeyOne, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(plainAlphabet)
                            .addComponent(cipherAlphabet, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(generateRandomAlphabetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptionKeyOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptionKeyTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plainAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cipherAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateRandomAlphabetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cipher Text"));

        cipherTextArea.setToolTipText("Cipher Text");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cipherTextArea)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cipherTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Operation Log"));

        mainLogTextArea.setEditable(false);
        mainLogTextArea.setColumns(20);
        mainLogTextArea.setRows(5);
        jScrollPane2.setViewportView(mainLogTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addContainerGap())
        );

        operationMenu.setText("Select");

        shiftMenuItem.setText("Shift (Caesar)");
        operationMenu.add(shiftMenuItem);

        jMenuItem1.setText("jMenuItem1");
        operationMenu.add(jMenuItem1);

        menuBar.add(operationMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(menuPanelX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuPanelX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //</editor-fold>
    
    private void generateRandomAlphabetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRandomAlphabetButtonActionPerformed

        try{
            cipherAlphabet.setText(shuffleCharacterSet());
        }catch(Exception e){
            mainLog = "\n\rERROR >> Generate Random Alphabet >> " + e.getMessage();
        }finally{
            if(mainLog.length()>0)
            mainLogTextArea.setText(mainLogTextArea.getText() + mainLog);
        }
    }//GEN-LAST:event_generateRandomAlphabetButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed

        try{
            String invalidChr = checkInvalidCharacter(encryptionKeyOne.getText());
            String invalidChrText = checkInvalidCharacter(plainTextArea.getText());
            switch (encryptionType.getSelectedIndex()){
                case 0:
                    plainTextArea.setText(
                        decryptCipherTextShift(cipherTextArea.getText(), Integer.parseInt(encryptionKeyOne.getText()) ));
                    mainLog = "\n\rSUCCESS >> Decryption >> Shift key";
                break;
                case 1:
                    plainTextArea.setText(
                        decryptPlainTextSubstitution( cipherTextArea.getText()) );
                    mainLog = "\n\rSUCCESS >> Decryption >> Substitution";
                    break;
                case 2:
                    if(invalidChr.length()==0 && invalidChrText.length()==0){
                        int a = Integer.parseInt(encryptionKeyOne.getText());
                        int b = Integer.parseInt(encryptionKeyTwo.getText());
                        plainTextArea.setText(
                            decryptPlainTextAffine(cipherTextArea.getText(),a,b)
                        );
                        mainLog = "\n\rSUCCESS >> Decryption >> Affine";
                    }else{
                        mainLog = "\n\rERROR >> Decryption >> Affine >> plain text & encryption key must be in character set ( invalid character :\" "+ invalidChr + " " + invalidChrText + "\" )";
                    }
                    
                    break;
                case 3:
                    if(invalidChr.length()==0 && invalidChrText.length()==0){
                        plainTextArea.setText(
                            decryptPlainTextVigenere(cipherTextArea.getText(),encryptionKeyOne.getText())
                        );
                        mainLog = "\n\rSUCCESS >> Decryption >> Vigenere";
                    }else{
                        mainLog = "\n\rERROR >> Decryption >> Vigenere >> plain text & encryption key must be in character set ( invalid character :\" "+ invalidChr + " " + invalidChrText + "\" )";
                    }
                    break;
                default:
                    break;
            }

        }catch(NumberFormatException e){
            mainLog = "\n\rERROR >> Decryption >> Shift key parse error";
        }catch(Exception e){
            mainLog = "\n\rERROR >> Decryption >> " + e.getMessage();
        }finally{
            if(mainLog.length()>0)
            mainLogTextArea.setText(mainLogTextArea.getText() + mainLog);
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        
        try{
            String invalidChr = checkInvalidCharacter(encryptionKeyOne.getText());
            String invalidChrText = checkInvalidCharacter(plainTextArea.getText());
            switch (encryptionType.getSelectedIndex()){
                case 0:
                    cipherTextArea.setText(
                        encryptPlainTextShift(plainTextArea.getText(), Integer.parseInt(encryptionKeyOne.getText()))
                    );
                    mainLog = "\n\rSUCCESS >> Encryption >> Shift key";
                    break;
                case 1:
                    cipherTextArea.setText(
                        encryptPlainTextSubstitution(plainTextArea.getText()) 
                    );
                    mainLog = "\n\rSUCCESS >> Encryption >> Substitution";
                    break;
                case 2:
                    if(invalidChr.length()==0 && invalidChrText.length()==0){
                        int a = Integer.parseInt(encryptionKeyOne.getText());
                        int b = Integer.parseInt(encryptionKeyTwo.getText());
                        int inverseNumber = modInverse(a , characterSet.length());
                        if(inverseNumber==-1)
                            mainLog = "\n\rWARNING >> Encryption >> Affine >> Function has no modular inverse";
                            
                        cipherTextArea.setText(
                            encryptPlainTextAffine(plainTextArea.getText(),a,b)
                        );
                        mainLog = "\n\rSUCCESS >> Encryption >> Affine >> (inverse number : " +inverseNumber+ ")";
                    }else{
                        mainLog = "\n\rERROR >> Encryption >> Affine >> plain text & encryption key must be in character set ( invalid character :\" "+ invalidChr + " " + invalidChrText + "\" )";
                    }
                    break;
                case 3:
                    if(invalidChr.length()==0 && invalidChrText.length()==0){
                        cipherTextArea.setText(
                            encryptPlainTextVigenere(plainTextArea.getText(),encryptionKeyOne.getText())
                        );
                        mainLog = "\n\rSUCCESS >> Encryption >> Vigenere";
                    }else{
                        mainLog = "\n\rERROR >> Encryption >> Vigenere >> plain text & encryption key must be in character set ( invalid character :\" "+ invalidChr + " " + invalidChrText + "\" )";
                    }
                    break;
                default:
                    break;
            }

        }catch(NumberFormatException e){
            mainLog = "\n\rERROR >> Encryption >> Shift key parse error";
        }catch(Exception e){
            mainLog = "\n\rERROR >> Encryption >> " + e.getMessage();
        }finally{
            if(mainLog.length()>0)
            mainLogTextArea.setText(mainLogTextArea.getText() + mainLog);
        }
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
        // TODO add your handling code here:
        mainLogTextArea.setText("");
    }//GEN-LAST:event_clearLogButtonActionPerformed

    private void encryptionTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_encryptionTypeItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED){
            switch (encryptionType.getSelectedIndex()){
                case 0:
                    encryptionKeyOne.setText("");
                    encryptionKeyOne.setEditable(true);
                    encryptionKeyTwo.setText("");
                    encryptionKeyTwo.setEditable(false);
                    mainLog = "\n\rINFO >> Shift Encryption Selected >> enter encryption key to Key-1";
                    break;
                case 1:
                    encryptionKeyOne.setText("");
                    encryptionKeyOne.setEditable(false);
                    encryptionKeyTwo.setText("");
                    encryptionKeyTwo.setEditable(false);
                    mainLog = "\n\rINFO >> Substitution Encryption Selected >> no need any key for encryption";
                    break;
                case 2:
                    encryptionKeyOne.setText("");
                    encryptionKeyOne.setEditable(true);
                    encryptionKeyTwo.setText("");
                    encryptionKeyTwo.setEditable(true);
                    mainLog = "\n\rINFO >> Affine Encryption Selected >> enter encryption keys to Key-1 and Key-2 ((Key-1)*x + (Key-2))";
                    break;
                case 3:
                    encryptionKeyOne.setText("");
                    encryptionKeyOne.setEditable(true);
                    encryptionKeyTwo.setText("");
                    encryptionKeyTwo.setEditable(false);
                    mainLog = "\n\rINFO >> Vigenere Encryption Selected >> enter encryption key to Key-1";
                    break;
                default:
                    break;
            }
            mainLogTextArea.setText(mainLogTextArea.getText() + mainLog);
        }
    }//GEN-LAST:event_encryptionTypeItemStateChanged

    private static String encryptPlainTextShift(String plainText, int key ){
        //shift character set 
        key %= characterSet.length();
        String prefix = characterSet.substring(0, key);
        String shiftedCharacterSet = characterSet.substring(key) + prefix;
        String cipherText = "";
        for(int i=0; i<plainText.length(); i++){
            //dont shift for space character
            if(plainText.charAt(i) == ' '){
                cipherText += plainText.charAt(i);
            }else{
                if(characterSet.indexOf(plainText.charAt(i))!=-1){
                    cipherText += shiftedCharacterSet.charAt(characterSet.indexOf(plainText.charAt(i)));
                }else{
                    cipherText += plainText.charAt(i);
                } 
            }
        }
        return cipherText;
    }
    
    private static String decryptCipherTextShift(String cipherText, int key ){
        //shift character set 
        key %= characterSet.length();
        String prefix = characterSet.substring(0, key);
        String shiftedCharacterSet = characterSet.substring(key) + prefix;
        String plainText = "";
        for(int i=0; i<cipherText.length(); i++){
            //dont shift for space character
            if(cipherText.charAt(i) == ' '){
                plainText += cipherText.charAt(i);
            }else{
                if(shiftedCharacterSet.indexOf(cipherText.charAt(i))!=-1){
                    plainText += characterSet.charAt(shiftedCharacterSet.indexOf(cipherText.charAt(i)));
                }else{
                    plainText += cipherText.charAt(i);
                }
            }
        }
        return plainText;
    }
    
    private static String encryptPlainTextSubstitution(String plainText){
        String cipherText = "";
        for(int i=0; i<plainText.length(); i++){
            //dont shift for space character
            if(plainText.charAt(i) == ' '){
                cipherText += plainText.charAt(i);
            }else{
                if(characterSet.indexOf(plainText.charAt(i))!=-1){
                    cipherText += randomCharacterSet.charAt(characterSet.indexOf(plainText.charAt(i)));
                }else{
                    cipherText += plainText.charAt(i);
                } 
            }
        }
        return cipherText;
    }
    
    private static String decryptPlainTextSubstitution(String cipherText){
        String plainText = "";
        for(int i=0; i<cipherText.length(); i++){
            //dont shift for space character
            if(cipherText.charAt(i) == ' '){
                plainText += cipherText.charAt(i);
            }else{
                if(randomCharacterSet.indexOf(cipherText.charAt(i))!=-1){
                    plainText += characterSet.charAt(randomCharacterSet.indexOf(cipherText.charAt(i)));
                }else{
                    plainText += cipherText.charAt(i);
                }
            }
        }
        return plainText;
    }
    
    private static String encryptPlainTextAffine(String plainText, int a, int b){
        String cipherText = "";
        for(int i=0; i<plainText.length(); i++){
            //dont shift for space character
            if(plainText.charAt(i) == ' '){
                cipherText += plainText.charAt(i);
            }else{
                if(characterSet.indexOf(plainText.charAt(i))!=-1){
                    int position = ((a * characterSet.indexOf(plainText.charAt(i))) + b) % characterSet.length();
                    cipherText += characterSet.charAt(position);
                }else{
                    cipherText += plainText.charAt(i);
                } 
            }
        }
        return cipherText;
    }
    
    private static String decryptPlainTextAffine(String cipherText, int a, int b){
        String plainTexts = "";
        for(int i=0; i<cipherText.length(); i++){
            //dont shift for space character
            if(cipherText.charAt(i) == ' '){
                plainTexts += cipherText.charAt(i);
            }else{
                if(characterSet.indexOf(cipherText.charAt(i))!=-1){
                    int c = modInverse(a , characterSet.length());
                    int position = (c * (characterSet.indexOf(cipherText.charAt(i)) - b));
                    while(position<0)
                        position += characterSet.length();
                    
                    position %= characterSet.length();
                    plainTexts += characterSet.charAt(position);
                }else{
                    plainTexts += cipherText.charAt(i);
                } 
            }
        }
        return plainTexts;
    }
    
    private static String encryptPlainTextVigenere(String plainText , String encryptionKey){
        String cipherText = "";
        for(int i=0; i<plainText.length(); i++){
            //dont shift for space character
            if(plainText.charAt(i) == ' '){
                cipherText += plainText.charAt(i);
            }else{
                if(characterSet.indexOf(plainText.charAt(i))!=-1){
                    int encryptionKeyPos = i%encryptionKey.length();
                    int positionOne = characterSet.indexOf(plainText.charAt(i));
                    int positionTwo = characterSet.indexOf(encryptionKey.charAt(encryptionKeyPos));
                    int position = (positionOne+positionTwo)%characterSet.length();
                    cipherText += characterSet.charAt(position);
                }else{
                    cipherText += plainText.charAt(i);
                } 
            }
        }
        return cipherText;
    }
    
    private static String decryptPlainTextVigenere(String cipherText , String encryptionKey){
        String plainText = "";
        for(int i=0; i<cipherText.length(); i++){
            //dont shift for space character
            if(cipherText.charAt(i) == ' '){
                plainText += cipherText.charAt(i);
            }else{
                if(characterSet.indexOf(cipherText.charAt(i))!=-1){
                    int encryptionKeyPos = i%encryptionKey.length();
                    int positionOne = characterSet.indexOf(cipherText.charAt(i));
                    int positionTwo = characterSet.indexOf(encryptionKey.charAt(encryptionKeyPos));
                    int position = positionOne-positionTwo<0 ? (positionOne-positionTwo)%characterSet.length() : (positionOne-positionTwo+characterSet.length())%characterSet.length() ;
                    plainText += characterSet.charAt(position);
                }else{
                    plainText += plainText.charAt(i);
                } 
            }
        }
        return plainText;
    }
    
    private static String shuffleCharacterSet(){
        //shuffle character set 
        Random rand = new Random();
        StringBuilder tempCharacterSet = new StringBuilder(characterSet);
        StringBuilder shuffledCharacterSet = new StringBuilder("");
        
        while(tempCharacterSet.length()>0){
            int randomSelectedChar = tempCharacterSet.length()!=1 ? rand.nextInt(tempCharacterSet.length()) : 0;
            shuffledCharacterSet.append(tempCharacterSet.charAt(randomSelectedChar));
            tempCharacterSet = tempCharacterSet.deleteCharAt(randomSelectedChar);
        }
        
        randomCharacterSet = shuffledCharacterSet.toString();
        return randomCharacterSet;
    }
    
    private static String checkInvalidCharacter(String text){
        for(int i=0; i<text.length(); i++){
            if(characterSet.indexOf(text.charAt(i))<0 && text.charAt(i)!=' ')
                return ""+text.charAt(i);
        }
        return "";
    }
    
    private static int modInverse(int a, int mod){
        a = a % mod;
        for (int x = 1; x < mod; x++)
           if ((a * x) % mod == 1)
              return x;
        
        return -1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cipherAlphabet;
    private javax.swing.JTextField cipherTextArea;
    private javax.swing.JTextField encryptionKeyOne;
    private javax.swing.JTextField encryptionKeyTwo;
    private javax.swing.JComboBox<String> encryptionType;
    private javax.swing.JButton generateRandomAlphabetButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mainLogTextArea;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel menuPanelX;
    private javax.swing.JMenu operationMenu;
    private javax.swing.JTextField plainAlphabet;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JMenuItem shiftMenuItem;
    // End of variables declaration//GEN-END:variables
    public static String characterSet = "abcçdefgğhıijklmnoöpqrsştuüvxwyz.,!?*1234567890ABCÇDEFGĞHIİJKLMNOÖPQRSŞTUÜVXWYZ";
    public static String randomCharacterSet = "";
    public static String mainLog = "";
}
